# Production environment overrides
# Use with: helm install brahminykite ./helm/brahminykite -f ./helm/brahminykite/values-prod.yaml

# Scale up for production
services:
  replicaCount: 3
  empirical:
    replicaCount: 3
  contextual:
    replicaCount: 3
  consistency:
    replicaCount: 3
  powerDynamics:
    replicaCount: 3
  utility:
    replicaCount: 3
  evolution:
    replicaCount: 3

api:
  replicaCount: 5
  env:
    LOG_LEVEL: "WARNING"
    CORS_ORIGINS: "https://app.brahminykite.io"

# Production resource requirements
services:
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1000m"

api:
  resources:
    requests:
      memory: "1Gi"
      cpu: "750m"
    limits:
      memory: "2Gi"
      cpu: "2000m"

# Production domains with TLS
ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-rps: "10"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
  hosts:
    - host: api.brahminykite.io
      paths:
        - path: /
          pathType: Prefix
          service: api
          port: 8000
    - host: grafana.brahminykite.io
      paths:
        - path: /
          pathType: Prefix
          service: grafana
          port: 3000
    - host: prometheus.brahminykite.io
      paths:
        - path: /
          pathType: Prefix
          service: prometheus-server
          port: 80
  tls:
    - secretName: brahminykite-tls
      hosts:
        - api.brahminykite.io
        - grafana.brahminykite.io
        - prometheus.brahminykite.io

# Production storage
postgresql:
  primary:
    persistence:
      size: 100Gi
      storageClass: "fast-ssd"
    resources:
      requests:
        memory: "1Gi"
        cpu: "1000m"
      limits:
        memory: "4Gi"
        cpu: "2000m"

redis:
  master:
    persistence:
      enabled: true
      size: 10Gi
      storageClass: "fast-ssd"
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"

prometheus:
  server:
    persistentVolume:
      size: 100Gi
      storageClass: "fast-ssd"
    resources:
      requests:
        memory: "2Gi"
        cpu: "1000m"
      limits:
        memory: "8Gi"
        cpu: "4000m"
    retention: "30d"

grafana:
  persistence:
    size: 20Gi
    storageClass: "fast-ssd"
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1000m"

# Enable autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Production logging
logging:
  level: WARNING
  format: json

# Disable debug features
monitoring:
  profiling:
    enabled: false

# Enable all security features
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Production environment
environment: production

# Node affinity for production
global:
  nodeSelector:
    node-role.kubernetes.io/worker: "true"
    environment: "production"
  
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - brahminykite
          topologyKey: kubernetes.io/hostname