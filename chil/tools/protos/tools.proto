syntax = "proto3";

package chil.tools;

option python_out = ".";

// Common message types
message VerificationRequest {
  string claim = 1;
  map<string, string> metadata = 2;
  string request_id = 3;
}

message VerificationResponse {
  string request_id = 1;
  double confidence = 2;
  string explanation = 3;
  map<string, string> evidence = 4;
  int64 processing_time_ms = 5;
}

// Empirical Framework Service
service EmpiricalTools {
  // Z3 SMT Solver
  rpc CheckLogicalConsistency(Z3Request) returns (Z3Response);
  
  // Lean Theorem Prover
  rpc ProveTheorem(LeanRequest) returns (LeanResponse);
  
  // DuckDB Analytics
  rpc QueryFactDatabase(DuckDBRequest) returns (DuckDBResponse);
  
  // RDF/SPARQL with Oxigraph
  rpc QueryKnowledgeGraph(SparqlRequest) returns (SparqlResponse);
}

message Z3Request {
  string formula = 1;
  repeated string constraints = 2;
  int32 timeout_ms = 3;
}

message Z3Response {
  bool satisfiable = 1;
  map<string, string> model = 2;
  string proof = 3;
}

message LeanRequest {
  string theorem = 1;
  repeated string axioms = 2;
  string tactic = 3;
}

message LeanResponse {
  bool proven = 1;
  string proof = 2;
  repeated string steps = 3;
}

message DuckDBRequest {
  string query = 1;
  map<string, string> parameters = 2;
}

message DuckDBResponse {
  repeated Row results = 1;
  int64 row_count = 2;
  
  message Row {
    map<string, string> columns = 1;
  }
}

message SparqlRequest {
  string query = 1;
  string graph_uri = 2;
}

message SparqlResponse {
  repeated Binding bindings = 1;
  
  message Binding {
    map<string, string> variables = 1;
  }
}

// Contextual Framework Service
service ContextualTools {
  // spaCy NLP
  rpc AnalyzeText(SpacyRequest) returns (SpacyResponse);
  
  // Gensim Topic Modeling
  rpc ExtractTopics(GensimRequest) returns (GensimResponse);
  
  // FAISS Vector Search
  rpc SearchSimilar(FaissRequest) returns (FaissResponse);
  
  // Local Sentiment Analysis
  rpc AnalyzeSentiment(SentimentRequest) returns (SentimentResponse);
}

message SpacyRequest {
  string text = 1;
  repeated string analyses = 2; // ["entities", "pos", "dependency"]
}

message SpacyResponse {
  repeated Entity entities = 1;
  repeated Token tokens = 2;
  
  message Entity {
    string text = 1;
    string label = 2;
    int32 start = 3;
    int32 end = 4;
  }
  
  message Token {
    string text = 1;
    string pos = 2;
    string dep = 3;
  }
}

message GensimRequest {
  repeated string documents = 1;
  int32 num_topics = 2;
}

message GensimResponse {
  repeated Topic topics = 1;
  
  message Topic {
    int32 id = 1;
    repeated WordWeight words = 2;
  }
  
  message WordWeight {
    string word = 1;
    double weight = 2;
  }
}

message FaissRequest {
  repeated float query_vector = 1;
  int32 k = 2;
  string index_name = 3;
}

message FaissResponse {
  repeated Neighbor neighbors = 1;
  
  message Neighbor {
    int64 id = 1;
    float distance = 2;
    map<string, string> metadata = 3;
  }
}

message SentimentRequest {
  string text = 1;
  string model = 2; // "textblob", "vader", "custom"
}

message SentimentResponse {
  double polarity = 1;
  double subjectivity = 2;
  string label = 3; // "positive", "negative", "neutral"
}

// Consistency Framework Service
service ConsistencyTools {
  // Already have Z3 and Prolog in EmpiricalTools
  
  // SQLite FTS5 for pattern matching
  rpc SearchPatterns(SqliteRequest) returns (SqliteResponse);
  
  // Souffle Datalog
  rpc RunDatalogQuery(DatalogRequest) returns (DatalogResponse);
}

message SqliteRequest {
  string query = 1;
  string table = 2;
  map<string, string> parameters = 3;
}

message SqliteResponse {
  repeated Row results = 1;
  
  message Row {
    map<string, string> columns = 1;
  }
}

message DatalogRequest {
  string program = 1;
  repeated Fact facts = 2;
  string query = 3;
  
  message Fact {
    string predicate = 1;
    repeated string arguments = 2;
  }
}

message DatalogResponse {
  repeated Result results = 1;
  
  message Result {
    repeated string values = 1;
  }
}

// Power Dynamics Framework Service
service PowerDynamicsTools {
  // Fairness Metrics
  rpc ComputeFairness(FairnessRequest) returns (FairnessResponse);
  
  // NetworkX Graph Analysis
  rpc AnalyzeNetwork(NetworkRequest) returns (NetworkResponse);
  
  // Clustering for Perspectives
  rpc ClusterPerspectives(ClusterRequest) returns (ClusterResponse);
  
  // Rust-based Bias Detection
  rpc DetectBias(BiasRequest) returns (BiasResponse);
}

message FairnessRequest {
  repeated double predictions = 1;
  repeated string groups = 2;
  string metric = 3; // "demographic_parity", "equalized_odds", etc.
}

message FairnessResponse {
  double score = 1;
  map<string, double> group_scores = 2;
  string interpretation = 3;
}

message NetworkRequest {
  repeated Edge edges = 1;
  string analysis = 2; // "centrality", "communities", "influence"
  
  message Edge {
    string source = 1;
    string target = 2;
    double weight = 3;
  }
}

message NetworkResponse {
  map<string, double> node_scores = 1;
  repeated Community communities = 2;
  
  message Community {
    repeated string nodes = 1;
    double modularity = 2;
  }
}

message ClusterRequest {
  repeated Feature features = 1;
  int32 n_clusters = 2;
  string algorithm = 3; // "kmeans", "dbscan", "hierarchical"
  
  message Feature {
    repeated double values = 1;
    string id = 2;
  }
}

message ClusterResponse {
  repeated Cluster clusters = 1;
  
  message Cluster {
    int32 id = 1;
    repeated string members = 2;
    repeated double centroid = 3;
  }
}

message BiasRequest {
  string text = 1;
  repeated string bias_types = 2; // ["gender", "race", "age"]
}

message BiasResponse {
  repeated BiasDetection detections = 1;
  
  message BiasDetection {
    string type = 1;
    double score = 2;
    repeated string evidence = 3;
  }
}

// Utility Framework Service
service UtilityTools {
  // XGBoost/LightGBM Predictions
  rpc PredictOutcome(GBMRequest) returns (GBMResponse);
  
  // OR-Tools Optimization
  rpc Optimize(OptimizationRequest) returns (OptimizationResponse);
  
  // Game Theory Solver
  rpc SolveGame(GameRequest) returns (GameResponse);
  
  // Numba-accelerated Calculations
  rpc ComputeUtility(UtilityRequest) returns (UtilityResponse);
}

message GBMRequest {
  repeated Feature features = 1;
  string model_name = 2;
  
  message Feature {
    map<string, double> values = 1;
  }
}

message GBMResponse {
  repeated double predictions = 1;
  repeated FeatureImportance importances = 2;
  
  message FeatureImportance {
    string feature = 1;
    double importance = 2;
  }
}

message OptimizationRequest {
  repeated Variable variables = 1;
  repeated Constraint constraints = 2;
  string objective = 3;
  bool maximize = 4;
  
  message Variable {
    string name = 1;
    double min = 2;
    double max = 3;
  }
  
  message Constraint {
    string expression = 1;
    string type = 2; // "<=", ">=", "=="
    double value = 3;
  }
}

message OptimizationResponse {
  map<string, double> solution = 1;
  double objective_value = 2;
  string status = 3;
}

message GameRequest {
  repeated Player players = 1;
  repeated repeated double payoff_matrix = 2;
  
  message Player {
    string id = 1;
    repeated string strategies = 2;
  }
}

message GameResponse {
  repeated Equilibrium equilibria = 1;
  
  message Equilibrium {
    map<string, double> mixed_strategies = 1;
    double payoff = 2;
  }
}

message UtilityRequest {
  repeated double inputs = 1;
  string function = 2; // "expected_value", "risk_adjusted", etc.
  map<string, double> parameters = 3;
}

message UtilityResponse {
  double utility = 1;
  map<string, double> components = 2;
}

// Evolution Framework Service
service EvolutionTools {
  // DEAP Genetic Algorithms
  rpc RunGeneticAlgorithm(GeneticRequest) returns (GeneticResponse);
  
  // JAX Evolutionary Strategies
  rpc OptimizeEvolutionary(EvolutionRequest) returns (EvolutionResponse);
  
  // Ray RLlib Reinforcement Learning
  rpc TrainPolicy(RLRequest) returns (RLResponse);
  
  // Custom Rust Evolutionary Algorithms
  rpc EvolvePopulation(PopulationRequest) returns (PopulationResponse);
}

message GeneticRequest {
  int32 population_size = 1;
  int32 generations = 2;
  double mutation_rate = 3;
  double crossover_rate = 4;
  string fitness_function = 5;
}

message GeneticResponse {
  repeated Individual best_individuals = 1;
  repeated double fitness_history = 2;
  
  message Individual {
    repeated double genome = 1;
    double fitness = 2;
  }
}

message EvolutionRequest {
  repeated double initial_params = 1;
  int32 iterations = 2;
  double learning_rate = 3;
  string strategy = 4; // "CMA-ES", "Natural Evolution", etc.
}

message EvolutionResponse {
  repeated double optimized_params = 1;
  double best_fitness = 2;
  repeated double convergence_history = 3;
}

message RLRequest {
  string environment = 1;
  string algorithm = 2; // "PPO", "SAC", "DQN"
  int32 training_steps = 3;
  map<string, double> hyperparameters = 4;
}

message RLResponse {
  bytes policy_weights = 1;
  repeated double reward_history = 2;
  map<string, double> metrics = 3;
}

message PopulationRequest {
  int32 size = 1;
  repeated Individual initial_population = 2;
  string selection_method = 3;
  
  message Individual {
    repeated double genes = 1;
  }
}

message PopulationResponse {
  repeated EvolvedIndividual population = 1;
  
  message EvolvedIndividual {
    repeated double genes = 1;
    double fitness = 2;
    int32 generation = 3;
  }
}